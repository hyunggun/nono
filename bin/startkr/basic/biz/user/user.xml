<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
    "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="user">
  <typeAlias alias="hashmap" type="java.util.HashMap" />

  <!-- tb_user -->
  <statement id="create_tb_user">
    CREATE TABLE `tb_user` (
      `user_id` INT(11) NOT NULL AUTO_INCREMENT,
      `sign_id` VARCHAR(60) NOT NULL,
      `passwd` VARCHAR(60) NOT NULL,
      `user_nm` VARCHAR(60) NOT NULL,
      `use_fg` CHAR(1) NOT NULL DEFAULT 'Y',
      `auth_id` INT(11) DEFAULT 1,
      `ins_usr` INT(11),
      `ins_ip` VARCHAR(60),
      `ins_dt` DATETIME,
      `upd_usr` INT(11),
      `upd_ip` VARCHAR(60),
      `upd_dt` DATETIME,
      `file_id` INT(11) DEFAULT 0,
      `phone` VARCHAR(30),
      `email` VARCHAR(60),
      `birthday` VARCHAR(8),
      `sns_se` int(11) DEFAULT '0',
      `refer_cn` VARCHAR(120),
      PRIMARY KEY (`user_id`) 
    ) COLLATE='utf8_general_ci' ENGINE=InnoDB;
  </statement>

  <statement id="create_fn_get_user_nm">
    DELIMITER $$
    CREATE FUNCTION `fn_get_user_nm`(`i_user_id` INT)
      RETURNS VARCHAR(60) CHARSET utf8
      LANGUAGE SQL
      NOT DETERMINISTIC
      CONTAINS SQL
      SQL SECURITY DEFINER
    COMMENT '사용자 이름 반환'
    BEGIN
      DECLARE o_user_nm VARCHAR(60);	
      SELECT user_nm INTO o_user_nm
      FROM tb_user
      WHERE user_id = i_user_id;
      RETURN o_user_nm;
    END $$
  </statement>

  <!-- tb_user -->
  <sql id="whereUser">
    <dynamic prepend="WHERE">
      <isNotEmpty property="s_sign_id" prepend="AND">
           sign_id LIKE CONCAT('%', #s_sign_id#, '%')
      </isNotEmpty>
      <isNotEmpty property="s_user_nm" prepend="AND">
           user_nm LIKE CONCAT('%', #s_user_nm#, '%')
      </isNotEmpty>
      <isNotEmpty property="s_phone" prepend="AND">
           phone LIKE CONCAT('%', #s_phone#, '%')
      </isNotEmpty>
      <isNotEmpty property="use_fg" prepend="AND">
           use_fg = #use_fg#
      </isNotEmpty>
    </dynamic>
  </sql>

  <select id="selectUserCount" resultClass="int" parameterClass="hashmap">
    SELECT count(1)
      FROM tb_user
    <include refid="whereUser"/>
  </select>

  <select id="selectUserList" resultClass="hashmap" parameterClass="hashmap">
    SELECT usr.*
      FROM (
           SELECT usr.*
             FROM tb_user usr
    <include refid="whereUser"/>
         ORDER BY user_nm
           ) usr
    <isNotEmpty property="maxResults">
     LIMIT
    <isNotEmpty property="skipResults">
     #skipResults# ,
    </isNotEmpty>
     #maxResults#
    </isNotEmpty>
  </select>

  <select id="selectUser" resultClass="hashmap" parameterClass="hashmap">
    SELECT usr.*
          ,file.file_url as image_url
          ,substr(usr.email, 1, instr(usr.email, '@') - 1 ) as email1
          ,substr(usr.email, instr(usr.email, '@') + 1 ) as email2
          ,substr(usr.phone, 1, instr(usr.phone, '-') - 1 ) as phone1
          ,substr(usr.phone, instr(usr.phone, '-') + 1, instr( substr( usr.phone, instr(usr.phone, '-') + 1 ), '-') - 1 ) as phone2
          ,substr(usr.phone, instr(usr.phone, '-') + 1 + instr( substr( usr.phone, instr(usr.phone, '-') + 1 ), '-') ) as phone3
      FROM tb_user usr
 LEFT JOIN tb_file file
        ON file.file_id = usr.file_id
    <dynamic prepend="WHERE">
      <isNotEmpty property="user_id" prepend="AND">
           user_id = #user_id#
      </isNotEmpty>
      <isNotEmpty property="sign_id" prepend="AND">
           sign_id = #sign_id#
      </isNotEmpty>
    </dynamic>
  </select>

  <insert id="insertUser" parameterClass="hashmap">
    INSERT INTO tb_user (
                sign_id
               ,passwd
               ,user_nm
               ,phone
               ,email
               ,birthday
               ,refer_cn
               ,file_id
               ,sns_se
               ,ins_usr
               ,ins_ip
               ,ins_dt
               ,upd_usr
               ,upd_ip
               ,upd_dt
              ) values (
                #sign_id#
               ,#passwd#
               ,#user_nm#
               ,#phone#
               ,#email#
               ,#birthday#
               ,#refer_cn#
               ,#file_id#
               ,ifnull(#sns_se#, 0)
               ,#usr_id#
               ,#usr_ip#
               ,now()
               ,#usr_id#
               ,#usr_ip#
               ,now()
              )
  </insert>

  <update id="updateUser" parameterClass="hashmap">
    UPDATE tb_user SET
           user_nm = #user_nm#
    <isNotEmpty property="passwd">
          ,passwd = #passwd#
    </isNotEmpty>
    <isNotNull property="phone">
          ,phone = #phone#
    </isNotNull>
    <isNotNull property="email">
          ,email = #email#
    </isNotNull>
    <isNotNull property="birthday">
          ,birthday = #birthday#
    </isNotNull>
    <isNotNull property="refer_cn">
          ,refer_cn = #refer_cn#
    </isNotNull>
    <isNotNull property="use_fg">
          ,use_fg = #use_fg#
    </isNotNull>
    <isNotEmpty property="file_id">
          ,file_id = #file_id#
    </isNotEmpty>
          ,upd_usr = #usr_id#
          ,upd_ip = #usr_ip#
          ,upd_dt = now()
     WHERE user_id = #user_id#
  </update>

  <update id="resetUser" parameterClass="hashmap">
    UPDATE tb_user SET
           use_fg = 'Y'
    <isNotEmpty property="passwd">
          ,passwd = #passwd#
    </isNotEmpty>
    <isNotNull property="email">
          ,email = #email#
    </isNotNull>
          ,upd_usr = #usr_id#
          ,upd_ip = #usr_ip#
          ,upd_dt = now()
     WHERE user_id = #user_id#
  </update>

  <update id="deleteUserFlag" parameterClass="hashmap">
    UPDATE tb_user SET
           use_fg = 'N'
          ,upd_usr = #usr_id#
          ,upd_ip = #usr_ip#
          ,upd_dt = now()
     WHERE user_id = #user_id#
  </update>

  <delete id="deleteUser" parameterClass="hashmap">
    DELETE
      FROM tb_user
     WHERE user_id = #user_id#
  </delete>

</sqlMap>